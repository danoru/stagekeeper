generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [citext(schema: "public"), uuid_ossp(map: "uuid-ossp", schema: "extensions")]
}

model attendance {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now()) @db.Timestamptz(6)
  comment      String?
  rating       Decimal?     @db.Decimal
  performance  Int
  user         Int?
  performances performances @relation(fields: [performance], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users        users?       @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model following {
  user              Int
  followingUsername String
  users             users  @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user, followingUsername])
}

model groups {
  id    Int     @id(map: "group_pkey") @default(autoincrement())
  name  String
  users users[]
}

model likedShows {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now()) @db.Timestamptz(6)
  type      PerformanceType
  user      Int
  musical   Int?
  play      Int?
  musicals  musicals?       @relation(fields: [musical], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "showings_musical_fkey")
  plays     plays?          @relation(fields: [play], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "showings_play_fkey")
  users     users           @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model musicals {
  id           Int            @id @default(autoincrement())
  title        String         @unique
  playbill     String         @default("https://picsum.photos/649/1024")
  duration     Int?
  musicBy      String
  lyricsBy     String
  bookBy       String
  premiere     DateTime?      @db.Date
  likedShows   likedShows[]
  performances performances[]
  programming  programming[]
  watchlist    watchlist[]
}

model performances {
  id         Int             @id(map: "showings_pkey") @default(autoincrement())
  type       PerformanceType
  play       Int?
  musical    Int?
  theatre    Int
  startTime  DateTime        @db.Timestamptz(6)
  endTime    DateTime        @db.Timestamptz(6)
  createdAt  DateTime        @default(now()) @db.Timestamptz(6)
  attendance attendance[]
  musicals   musicals?       @relation(fields: [musical], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "showings_musical_fkey")
  plays      plays?          @relation(fields: [play], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "showings_play_fkey")
  theatres   theatres        @relation(fields: [theatre], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "showings_theatre_fkey")
}

model plays {
  id           Int            @id @default(autoincrement())
  title        String         @unique
  playbill     String         @default("https://picsum.photos/649/1024")
  duration     Int?
  writtenBy    String
  premiere     DateTime       @db.Date
  likedShows   likedShows[]
  performances performances[]
  programming  programming[]
  watchlist    watchlist[]
}

model programming {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now()) @db.Timestamptz(6)
  type      PerformanceType
  play      Int?
  musical   Int?
  season    Int?
  startDate DateTime        @db.Timestamptz(6)
  endDate   DateTime        @db.Timestamptz(6)
  dayTimes  Json
  musicals  musicals?       @relation(fields: [musical], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "showings_musical_fkey")
  plays     plays?          @relation(fields: [play], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "showings_play_fkey")
  seasons   seasons?        @relation(fields: [season], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model seasons {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now()) @db.Timestamptz(6)
  theatre     Int
  name        String
  startDate   DateTime      @db.Timestamptz(6)
  endDate     DateTime      @db.Timestamptz(6)
  programming programming[]
  theatres    theatres      @relation(fields: [theatre], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model theatres {
  id           Int            @id(map: "playhouses_pkey") @default(autoincrement())
  name         String
  link         String?
  location     String
  image        String         @default("https://picsum.photos/649/1024")
  address      String?
  performances performances[]
  seasons      seasons[]
}

model users {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now()) @db.Timestamptz(6)
  username   String       @unique @db.Citext
  email      String       @unique @db.Citext
  password   String
  firstName  String?
  lastName   String?
  location   String?
  website    String?
  bio        String?
  image      String?
  badge      Badge        @default(USER)
  inGroup    Int?
  attendance attendance[]
  following  following[]
  likedShows likedShows[]
  groups     groups?      @relation(fields: [inGroup], references: [id], onDelete: NoAction, onUpdate: NoAction)
  watchlist  watchlist[]
}

model watchlist {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now()) @db.Timestamptz(6)
  type      PerformanceType
  user      Int
  play      Int?
  musical   Int?
  musicals  musicals?       @relation(fields: [musical], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "showings_musical_fkey")
  plays     plays?          @relation(fields: [play], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "showings_play_fkey")
  users     users           @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum Badge {
  ADMIN
  PATRON
  USER
}

enum PerformanceType {
  MUSICAL
  PLAY
}
